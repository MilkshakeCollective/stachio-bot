generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model GuildConfig {
  guildId            String              @id
  language           String              @default("en-US")
  broadcastChannelId String?
  watchdog           WatchdogConfig?
  AntiPhishing       AntiPhishingConfig?
  verification       VerificationConfig?
  InviteConfig       InviteConfig?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Guilds {
  id        Int         @id @default(autoincrement())
  guildId   String      @unique
  ownerId   String?
  name      String?
  icon      String?
  status    GuildStatus @default(BLACKLISTED)
  type      GuildType   @default(COMMUNITY)
  reason    String      @default("No reason provided")
  logged    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum GuildStatus {
  BLACKLISTED
}

enum GuildType {
  COMMUNITY
  BOT_FARM
  PARTNER
  LEAKS
  CHEATS
  MARKETPLACE
  RMT
  EXPLOITS
  GAMBLING
  MALWARE
  NSFW
  COPYCAT
  EXTREMISM
  BREACH_OF_TOS
}

model Users {
  id            Int            @id @default(autoincrement())
  userId        String         @unique
  last_username String?
  last_avatar   String?
  status        WatchdogStatus @default(BLOCKED)
  reason        String         @default("No reason provided")
  foundAt       Json           @default("[]")
  evidence      Json
  logged        Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum WatchdogStatus {
  APPEALED
  BLOCKED
  PERM_BLOCKED
  AUTO_BLOCKED
}

model WatchdogConfig {
  id      Int     @id @default(autoincrement())
  guildId String  @unique
  enabled Boolean @default(true)

  actionOnBlocked     WatchdogAction @default(KICK)
  actionOnPermBlocked WatchdogAction @default(BAN)
  actionOnAutoBlocked WatchdogAction @default(ROLE)
  roleId              String?
  logChannelId        String?

  guild GuildConfig @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WatchdogAction {
  WARN
  KICK
  BAN
  ROLE
}

model AntiPhishingConfig {
  id      Int     @id @default(autoincrement())
  guildId String  @unique
  enabled Boolean @default(true)

  ignoredRoles    Json
  ignoredUsers    Json
  ignoredChannels Json

  guild GuildConfig @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model VerificationConfig {
  id      String  @id @default(uuid())
  guildId String  @unique
  enabled Boolean @default(true)

  kickOnFail     Boolean @default(true)
  maxAttempts    Int     @default(3)
  timeoutSeconds Int     @default(43200) // 12 hours

  logsChannelId String
  channelId     String
  messageId     String?

  verifiedRoleIds Json

  emojiCategory String @default("colors")
  emojis        Json
  correctEmoji  String @default("")

  dmOnSuccess Boolean @default(true)
  dmOnFailure Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  guild    GuildConfig           @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  attempts VerificationAttempt[]
}

model VerificationAttempt {
  id                   String              @id @default(uuid())
  guildId              String
  userId               String
  attempts             Int                 @default(0)
  verified             Boolean             @default(false)
  lastTriedAt          DateTime            @default(now())
  VerificationConfig   VerificationConfig? @relation(fields: [verificationConfigId], references: [id])
  verificationConfigId String?

  @@unique([guildId, userId])
}

model InviteConfig {
  id         Int      @id @default(autoincrement())
  guildId    String   @unique
  enabled    Boolean  @default(false)
  logChannel String?
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  guild GuildConfig @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}
