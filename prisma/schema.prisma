generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model GuildConfig {
  guildId      String              @id
  language     String              @default("EN")
  watchdog     WatchdogConfig?
  AntiPhishing AntiPhishingConfig?
  verification VerificationConfig?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model Users {
  id            Int            @id @default(autoincrement())
  userId        String         @unique
  last_username String?
  last_avatar   String?
  status        WatchdogStatus @default(FLAGGED)
  reason        String?
  evidence      Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appeals       Appeal[]
}

enum WatchdogStatus {
  APPEALED
  FLAGGED
  PERM_FLAGGED
  AUTO_FLAGGED
}

model Appeal {
  id                Int          @id @default(autoincrement())
  userId            String
  status            AppealStatus @default(PENDING)
  reason            String?
  moderatorResponse String       @default("Awaiting Response")
  moderator         String       @default("Awaiting Response")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  user Users @relation(fields: [userId], references: [userId])
}

enum AppealStatus {
  PENDING
  APPROVED
  DENIED
}

model WatchdogConfig {
  id           Int            @id @default(autoincrement())
  guildId      String         @unique
  enabled      Boolean        @default(true)
  
  actionOnFlag WatchdogAction @default(KICK)
  actionOnPerm WatchdogAction @default(KICK)
  actionOnAuto WatchdogAction @default(ROLE)
  roleId       String?
  logChannelId String?

  guild GuildConfig @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WatchdogAction {
  WARN
  KICK
  BAN
  ROLE
}

model AntiPhishingConfig {
  id              Int     @id @default(autoincrement())
  guildId         String  @unique
  enabled         Boolean @default(true)

  ignoredRoles    Json
  ignoredUsers    Json
  ignoredChannels Json

  guild GuildConfig @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model VerificationConfig {
  id      String  @id @default(uuid())
  guildId String  @unique
  enabled Boolean @default(true)

  kickOnFail     Boolean @default(true)
  maxAttempts    Int     @default(3)
  timeoutSeconds Int     @default(43200) // 12 hours

  logsChannelId String
  channelId     String
  messageId     String?

  verifiedRoleIds Json

  emojiCategory String @default("colors")
  emojis        Json
  correctEmoji  String @default("")

  dmOnSuccess Boolean @default(true)
  dmOnFailure Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  guild    GuildConfig           @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  attempts VerificationAttempt[]
}

model VerificationAttempt {
  id                   String              @id @default(uuid())
  guildId              String
  userId               String
  attempts             Int                 @default(0)
  verified             Boolean             @default(false)
  lastTriedAt          DateTime            @default(now())
  VerificationConfig   VerificationConfig? @relation(fields: [verificationConfigId], references: [id])
  verificationConfigId String?

  @@unique([guildId, userId])
}
